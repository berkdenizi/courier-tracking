version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: courier-postgres
    environment:
      POSTGRES_DB: courier_tracking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: G7r#x9Lq2Tz8Pw!
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      # <-- Burada kullanıcı postgres olmalı (env'de postgres set ettin)
      test: ["CMD-SHELL", "pg_isready -U postgres -d courier_tracking"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: courier-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: courier-prometheus
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      app:
        condition: service_started

  grafana:
    image: grafana/grafana:11.2.0
    container_name: courier-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      prometheus:
        condition: service_started

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: courier-tracking:latest
    container_name: courier-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/courier_tracking
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: G7r#x9Lq2Tz8Pw!
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8080:8080"

volumes:
  pgdata:
  redisdata: